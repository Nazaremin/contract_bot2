#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
"""

import sys
import os
import unittest
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/home/ubuntu/telegram_contract_bot')

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    try:
        from config import config
        print("‚úÖ config.py - OK")
    except Exception as e:
        print(f"‚ùå config.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from db.database import db_manager
        print("‚úÖ database.py - OK")
    except Exception as e:
        print(f"‚ùå database.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from handlers.states import ContractForm
        print("‚úÖ states.py - OK")
    except Exception as e:
        print(f"‚ùå states.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from handlers.document_generator import document_generator
        print("‚úÖ document_generator.py - OK")
    except Exception as e:
        print(f"‚ùå document_generator.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    try:
        from utils.validator import validator
        print("‚úÖ validator.py - OK")
    except Exception as e:
        print(f"‚ùå validator.py - –û–®–ò–ë–ö–ê: {e}")
        return False
    
    return True

def test_database():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from db.database import db_manager
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'contract_name': '–¢–µ—Å—Ç ‚Ññ1',
            'contract_date': '01.01.2025',
            'agent_name': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç'
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        contract_id = db_manager.save_contract(
            user_id=12345,
            contract_type='agent',
            contract_name='–¢–µ—Å—Ç ‚Ññ1',
            data=test_data
        )
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î - OK (ID: {contract_id})")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ
        contracts = db_manager.get_user_contracts(12345)
        if contracts:
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î - OK")
        else:
            print("‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î - –û–®–ò–ë–ö–ê")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –û–®–ò–ë–ö–ê: {e}")
        return False

def test_validator():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞...")
    
    try:
        from utils.validator import validator
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã
        is_valid, error = validator.validate_date("01.01.2025")
        if is_valid:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è) - OK")
        else:
            print(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è) - –û–®–ò–ë–ö–ê: {error}")
            return False
        
        is_valid, error = validator.validate_date("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞")
        if not is_valid:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è) - OK")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è) - –û–®–ò–ë–ö–ê")
            return False
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
        is_valid, error = validator.validate_name("–¢–µ—Å—Ç–æ–≤–æ–µ –∏–º—è", "–ò–º—è")
        if is_valid:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ - OK")
        else:
            print(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ - –û–®–ò–ë–ö–ê: {error}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä - –û–®–ò–ë–ö–ê: {e}")
        return False

def test_document_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        from handlers.document_generator import document_generator
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'contract_name': '–¢–µ—Å—Ç ‚Ññ1',
            'contract_date': '01.01.2025',
            'agent_name': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç',
            'principal_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª',
            'reward': '100000 —Ä—É–±–ª–µ–π',
            'requisites': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
            'assignment_details': '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ',
            'report_details': '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç'
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        documents = document_generator.generate_agent_documents(test_data, 12345)
        
        if documents and len(documents) == 3:
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - OK ({len(documents)} —Ñ–∞–π–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
            for doc_path in documents:
                if os.path.exists(doc_path):
                    print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.basename(doc_path)}")
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_path}")
                    return False
        else:
            print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –û–®–ò–ë–ö–ê")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –û–®–ò–ë–ö–ê: {e}")
        return False

def test_templates():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    templates = [
        'agent_template.docx',
        'agent_assignment_template.docx', 
        'agent_report_template.docx',
        'subagent_template.docx',
        'subagent_assignment_template.docx',
        'subagent_report_template.docx',
        'delivery_template.docx'
    ]
    
    templates_dir = '/home/ubuntu/telegram_contract_bot/templates'
    
    for template in templates:
        template_path = os.path.join(templates_dir, template)
        if os.path.exists(template_path):
            print(f"‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω: {template}")
        else:
            print(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template}")
            return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram-–±–æ—Ç–∞ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_imports),
        ("–®–∞–±–ª–æ–Ω—ã", test_templates),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–í–∞–ª–∏–¥–∞—Ç–æ—Ä", test_validator),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", test_document_generation)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*50)
        
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
    
    print(f"\n{'='*50}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)

