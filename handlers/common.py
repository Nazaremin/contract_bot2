from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging

from handlers.states import ContractForm
from db.database import db_manager

router = Router()

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ù –ê–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="agent")],
        [InlineKeyboardButton(text="üë• –°—É–±–∞–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="subagent")],
        [InlineKeyboardButton(text="üì¶ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –¥–æ–≥–æ–≤–æ—Ä—ã", callback_data="my_contracts")]
    ])
    
    await message.answer(
        "üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.in_(["agent", "subagent", "delivery"]))
async def process_contract_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–≥–æ–≤–æ—Ä–∞"""
    contract_type = callback.data
    await state.update_data(contract_type=contract_type)
    
    contract_names = {
        "agent": "–ê–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
        "subagent": "–°—É–±–∞–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", 
        "delivery": "–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏"
    }
    
    await callback.message.edit_text(
        f"üìù –°–æ–∑–¥–∞–Ω–∏–µ: {contract_names[contract_type]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Ññ1, ‚Ññ–ê–°-2024-001):"
    )
    await state.set_state(ContractForm.contract_name)
    await callback.answer()

@router.message(ContractForm.contract_name)
async def process_contract_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞"""
    await state.update_data(contract_name=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(ContractForm.contract_date)

@router.message(ContractForm.contract_date)
async def process_contract_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –¥–æ–≥–æ–≤–æ—Ä–∞"""
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(contract_date=message.text)
        
        user_data = await state.get_data()
        contract_type = user_data["contract_type"]
        
        if contract_type == "agent":
            await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û –ê–≥–µ–Ω—Ç–∞:")
            await state.set_state(ContractForm.agent_name)
        elif contract_type == "subagent":
            await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û –ê–≥–µ–Ω—Ç–∞:")
            await state.set_state(ContractForm.agent_name)
        else:  # delivery
            await message.answer("üè≠ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
            await state.set_state(ContractForm.supplier_name)
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2025):")

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await state.clear()
    await message.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")

@router.callback_query(F.data == "my_contracts")
async def show_user_contracts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    contracts = db_manager.get_user_contracts(user_id)
    
    if not contracts:
        await callback.message.edit_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤.")
        return
    
    text = "üìã –í–∞—à–∏ –¥–æ–≥–æ–≤–æ—Ä—ã:\n\n"
    for contract in contracts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        text += f"‚Ä¢ {contract['name']} ({contract['type']})\n"
        text += f"  –°–æ–∑–¥–∞–Ω: {contract['created_at'][:16]}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ù –ê–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="agent")],
        [InlineKeyboardButton(text="üë• –°—É–±–∞–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="subagent")],
        [InlineKeyboardButton(text="üì¶ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –¥–æ–≥–æ–≤–æ—Ä—ã", callback_data="my_contracts")]
    ])
    
    await callback.message.edit_text(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:",
        reply_markup=keyboard
    )
    await callback.answer()

