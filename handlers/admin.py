from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import os
import shutil

from config import config
from db.database import db_manager

router = Router()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id == config.ADMIN_USER_ID

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏", callback_data="admin_templates")],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã", callback_data="admin_cleanup")]
    ])
    
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with db_manager._get_connection() as conn:
        cursor = conn.execute("SELECT COUNT(*) FROM contracts")
        total_contracts = cursor.fetchone()[0]
        
        cursor = conn.execute("SELECT contract_type, COUNT(*) FROM contracts GROUP BY contract_type")
        type_stats = cursor.fetchall()
        
        cursor = conn.execute("SELECT COUNT(DISTINCT user_id) FROM contracts")
        unique_users = cursor.fetchone()[0]
    
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
    stats_text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
    stats_text += f"üìÑ –í—Å–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {total_contracts}\n\n"
    stats_text += "–ü–æ —Ç–∏–ø–∞–º:\n"
    
    for contract_type, count in type_stats:
        type_names = {
            'agent': '–ê–≥–µ–Ω—Ç—Å–∫–∏–µ',
            'subagent': '–°—É–±–∞–≥–µ–Ω—Ç—Å–∫–∏–µ', 
            'delivery': '–ü–æ—Å—Ç–∞–≤–∫–∏'
        }
        stats_text += f"‚Ä¢ {type_names.get(contract_type, contract_type)}: {count}\n"
    
    await callback.message.edit_text(stats_text)
    await callback.answer()

@router.callback_query(F.data == "admin_templates")
async def admin_templates(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    templates_dir = config.TEMPLATES_PATH
    templates = os.listdir(templates_dir) if os.path.exists(templates_dir) else []
    
    text = "üìÅ –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n"
    if templates:
        for template in templates:
            text += f"‚Ä¢ {template}\n"
    else:
        text += "–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    text += "\nüí° –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ templates/"
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.callback_query(F.data == "admin_cleanup")
async def admin_cleanup(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    output_dir = config.OUTPUT_PATH
    if os.path.exists(output_dir):
        files = os.listdir(output_dir)
        for file in files:
            file_path = os.path.join(output_dir, file)
            if os.path.isfile(file_path):
                os.remove(file_path)
        
        await callback.message.edit_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ output/")
    else:
        await callback.message.edit_text("üìÅ –ü–∞–ø–∫–∞ output/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await callback.answer()

@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –¢–∏–ø—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤:
‚Ä¢ –ê–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (+ –ø–æ—Ä—É—á–µ–Ω–∏–µ –∏ –∞–∫—Ç –æ—Ç—á–µ—Ç–∞)
‚Ä¢ –°—É–±–∞–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (+ –ø–æ—Ä—É—á–µ–Ω–∏–µ –∏ –∞–∫—Ç –æ—Ç—á–µ—Ç–∞)  
‚Ä¢ –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –í–≤–æ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
‚Ä¢ –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    """
    
    await message.answer(help_text)

