import os
from aiogram import Router
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext

from handlers.states import ContractForm
from handlers.document_generator import generate_documents

router = Router()

@router.message(ContractForm.supplier_name)
async def process_supplier_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    await state.update_data(supplier_name=message.text)
    await message.answer("üõí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û –ü–æ–∫—É–ø–∞—Ç–µ–ª—è:")
    await state.set_state(ContractForm.buyer_name)

@router.message(ContractForm.buyer_name)
async def process_buyer_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    await state.update_data(buyer_name=message.text)
    await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥:")
    await state.set_state(ContractForm.goods_services)

@router.message(ContractForm.goods_services)
async def process_goods_services(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—á–Ω—è —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥"""
    await state.update_data(goods_services=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∏ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:")
    await state.set_state(ContractForm.price_payment_terms)

@router.message(ContractForm.price_payment_terms)
async def process_price_payment_terms(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –∏ —É—Å–ª–æ–≤–∏–π –æ–ø–ª–∞—Ç—ã"""
    await state.update_data(price_payment_terms=message.text)
    await message.answer("üöö –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(ContractForm.delivery_terms)

@router.message(ContractForm.delivery_terms)
async def process_delivery_terms(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏"""
    await state.update_data(delivery_terms=message.text)
    await message.answer("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω:")
    await state.set_state(ContractForm.responsibility)

@router.message(ContractForm.responsibility)
async def process_responsibility(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω"""
    await state.update_data(responsibility=message.text)
    await message.answer("üè¶ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å—Ç–æ—Ä–æ–Ω:")
    await state.set_state(ContractForm.requisites)

@router.message(ContractForm.requisites)
async def process_delivery_requisites(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    await state.update_data(requisites=message.text)
    
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
    
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    try:
        document_paths = await generate_documents(user_data, user_id)
        
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!")
        
        for path in document_paths:
            with open(path, 'rb') as doc:
                await message.answer_document(document=BufferedInputFile(doc.read(), filename=os.path.basename(path)))
        
        await message.answer("üìã –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞.")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
    
    await state.clear()

