import os
from aiogram import Router
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext

from handlers.states import ContractForm
from handlers.document_generator import generate_documents

router = Router()

@router.message(ContractForm.agent_name)
async def process_agent_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
    await state.update_data(agent_name=message.text)
    
    user_data = await state.get_data()
    if user_data["contract_type"] == "subagent":
        await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û –°—É–±–∞–≥–µ–Ω—Ç–∞:")
        await state.set_state(ContractForm.subagent_name)
    else:
        await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û –ü—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞:")
        await state.set_state(ContractForm.principal_name)

@router.message(ContractForm.subagent_name)
async def process_subagent_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å—É–±–∞–≥–µ–Ω—Ç–∞"""
    await state.update_data(subagent_name=message.text)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û –ü—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞:")
    await state.set_state(ContractForm.principal_name)

@router.message(ContractForm.principal_name)
async def process_principal_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–ª–∞"""
    await state.update_data(principal_name=message.text)
    
    user_data = await state.get_data()
    if user_data["contract_type"] == "subagent":
        await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è:")
        await state.set_state(ContractForm.agreement_subject)
    else:
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:")
        await state.set_state(ContractForm.reward)

@router.message(ContractForm.agreement_subject)
async def process_agreement_subject(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å—É–±–∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    await state.update_data(agreement_subject=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:")
    await state.set_state(ContractForm.reward)

@router.message(ContractForm.reward)
async def process_reward(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è"""
    await state.update_data(reward=message.text)
    await message.answer("üè¶ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å—Ç–æ—Ä–æ–Ω:")
    await state.set_state(ContractForm.requisites)

@router.message(ContractForm.requisites)
async def process_requisites(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —Å—Ç–æ—Ä–æ–Ω"""
    await state.update_data(requisites=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è:")
    await state.set_state(ContractForm.assignment_details)

@router.message(ContractForm.assignment_details)
async def process_assignment_details(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Ä—É—á–µ–Ω–∏—è"""
    await state.update_data(assignment_details=message.text)
    await message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–∫—Ç–∞ –æ—Ç—á–µ—Ç–∞:")
    await state.set_state(ContractForm.report_details)

@router.message(ContractForm.report_details)
async def process_report_details(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∞–∫—Ç–∞ –æ—Ç—á–µ—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    await state.update_data(report_details=message.text)
    
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
    
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    try:
        document_paths = await generate_documents(user_data, user_id)
        
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")
        
        for path in document_paths:
            with open(path, 'rb') as doc:
                await message.answer_document(document=BufferedInputFile(doc.read(), filename=os.path.basename(path)))
        
        await message.answer("üìã –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞.")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
    
    await state.clear()

