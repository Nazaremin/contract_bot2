#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞
–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/home/ubuntu/telegram_contract_bot')

from handlers.document_generator import generate_documents
from db.database import db_manager
from utils.validator import validator

def demo_agent_contract():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    print("ü§ù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ê–≥–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
    print("="*50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = {
        'contract_type': 'agent',
        'contract_name': '–ê–°-2025-001',
        'contract_date': '22.06.2025',
        'agent_name': '–û–û–û "–ê–≥–µ–Ω—Ç—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è"',
        'principal_name': '–û–û–û "–ü—Ä–∏–Ω—Ü–∏–ø–∞–ª"',
        'reward': '150000 (—Å—Ç–æ –ø—è—Ç—å–¥–µ—Å—è—Ç —Ç—ã—Å—è—á) —Ä—É–±–ª–µ–π',
        'requisites': '''
–ê–≥–µ–Ω—Ç:
–û–û–û "–ê–≥–µ–Ω—Ç—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
–ò–ù–ù: 1234567890
–ö–ü–ü: 123456789
–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1

–ü—Ä–∏–Ω—Ü–∏–ø–∞–ª:
–û–û–û "–ü—Ä–∏–Ω—Ü–∏–ø–∞–ª"
–ò–ù–ù: 0987654321
–ö–ü–ü: 987654321
–ê–¥—Ä–µ—Å: –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –¢–µ—Å—Ç–æ–≤—ã–π, –¥. 10
        '''.strip(),
        'assignment_details': '–ü–æ–∏—Å–∫ –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ IT-—É—Å–ª—É–≥',
        'report_details': '–ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ 5 –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É 500000 —Ä—É–±–ª–µ–π'
    }
    
    print("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for key, value in data.items():
        if key != 'contract_type':
            print(f"  {key}: {value}")
    
    print("\n–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error = validator.validate_date(data['contract_date'])
    print(f"  –î–∞—Ç–∞: {'‚úÖ' if is_valid else '‚ùå'} {error or 'OK'}")
    
    is_valid, error = validator.validate_name(data['agent_name'], '–ê–≥–µ–Ω—Ç')
    print(f"  –ê–≥–µ–Ω—Ç: {'‚úÖ' if is_valid else '‚ùå'} {error or 'OK'}")
    
    is_valid, error = validator.validate_money_amount(data['reward'])
    print(f"  –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {'‚úÖ' if is_valid else '‚ùå'} {error or 'OK'}")
    
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        import asyncio
        documents = asyncio.run(generate_documents(data, 12345))
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        for doc in documents:
            print(f"  üìÑ {os.path.basename(doc)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def demo_delivery_contract():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"""
    print("\nüì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏")
    print("="*50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = {
        'contract_type': 'delivery',
        'contract_name': '–î–ü-2025-001',
        'contract_date': '22.06.2025',
        'supplier_name': '–û–û–û "–ü–æ—Å—Ç–∞–≤—â–∏–∫"',
        'buyer_name': '–û–û–û "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"',
        'goods_services': '''
1. –ö–æ–º–ø—å—é—Ç–µ—Ä—ã ASUS - 10 —à—Ç.
2. –ú–æ–Ω–∏—Ç–æ—Ä—ã Samsung - 10 —à—Ç.
3. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –º—ã—à–∏ - 10 –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤
        '''.strip(),
        'price_payment_terms': '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 500000 —Ä—É–±–ª–µ–π. –û–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏.',
        'delivery_terms': '–ü–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞',
        'responsibility': '–ó–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –ø–æ—Å—Ç–∞–≤–∫–∏ - –ø–µ–Ω—è 0.1% –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏',
        'requisites': '''
–ü–æ—Å—Ç–∞–≤—â–∏–∫:
–û–û–û "–ü–æ—Å—Ç–∞–≤—â–∏–∫"
–ò–ù–ù: 1111111111
–ö–ü–ü: 111111111

–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:
–û–û–û "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
–ò–ù–ù: 2222222222
–ö–ü–ü: 222222222
        '''.strip()
    }
    
    print("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for key, value in data.items():
        if key != 'contract_type':
            print(f"  {key}: {value}")
    
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        import asyncio
        documents = asyncio.run(generate_documents(data, 12346))
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        for doc in documents:
            print(f"  üìÑ {os.path.basename(doc)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def demo_database():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("="*50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 12345
    contracts = db_manager.get_user_contracts(12345)
    print(f"–î–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 12345: {len(contracts)}")
    
    for contract in contracts:
        print(f"  ‚Ä¢ {contract['name']} ({contract['type']}) - {contract['created_at'][:16]}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 12346
    contracts = db_manager.get_user_contracts(12346)
    print(f"\n–î–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 12346: {len(contracts)}")
    
    for contract in contracts:
        print(f"  ‚Ä¢ {contract['name']} ({contract['type']}) - {contract['created_at'][:16]}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø TELEGRAM-–ë–û–¢–ê –î–õ–Ø –î–û–ì–û–í–û–†–û–í")
    print("="*60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
    print("="*60)
    
    success_count = 0
    total_demos = 3
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
    if demo_agent_contract():
        success_count += 1
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤–∫–∏
    if demo_delivery_contract():
        success_count += 1
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    demo_database()
    success_count += 1
    
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
    print('='*60)
    print(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {success_count}/{total_demos}")
    
    if success_count == total_demos:
        print("üéâ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
    
    return success_count == total_demos

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)

